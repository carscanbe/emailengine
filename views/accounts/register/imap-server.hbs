<form method="post" id="settings-form" action="/accounts/new/imap/server">
    <input type="hidden" name="crumb" value="{{crumb}}">
    <input type="hidden" name="data" value="{{values.data}}">
    <input type="hidden" name="sig" value="{{values.sig}}">
    <input type="hidden" name="email" value="{{values.email}}">
    <input type="hidden" name="name" value="{{values.name}}">

    <input type="hidden" name="appPassword_required" value="{{values.appPassword_required}}">
    <input type="hidden" name="appPassword_provider" value="{{values.appPassword_provider}}">
    <input type="hidden" name="appPassword_instructions" value="{{values.appPassword_instructions}}">
    <input type="hidden" name="appPassword_warning" value="{{values.appPassword_warning}}">


    <input type="hidden" id="tz" name="tz" value="{{values.tz}}">

    <div class="container">
        <div class="row">
            <div class="col-sm">
                <h6>{{_ "IMAP" }}</h6>

                <div class="form-group">
                    <label for="imap_auth_user">{{_ "Username" }}</label>
                    <input type="text" class="form-control {{#if errors.imap_auth_user}}is-invalid{{/if}}"
                        id="imap_auth_user" name="imap_auth_user" value="{{values.imap_auth_user}}" data-lpignore="true"
                        autocomplete="off" required tabindex="1" />
                    {{#if errors.imap_auth_user}}
                    <span class="invalid-feedback">{{errors.imap_auth_user}}</span>
                    {{/if}}
                </div>

                <div class="form-group">

                    {{#unless values.appPassword_required}}

                    <label for="imap_auth_pass">
                        {{_ "Password" }}
                    </label>

                    {{else}}


                    {{#if values.appPassword_warning}}

                    <a target="_blank" rel="noopener noreferrer" class="float-right" href="#" tabindex="-1"
                        data-toggle="popover" data-trigger="hover" data-title="{{_ 'Important' }}"
                        data-content="{{values.appPassword_warning}}"><i
                            class="fas fa-exclamation-circle text-danger"></i></a>

                    {{else}}

                    <a target="_blank" rel="noopener noreferrer" class="float-right"
                        href="{{values.appPassword_instructions}}" tabindex="-1" data-toggle="popover"
                        data-trigger="hover" data-title="{{_ 'Application Password' }}"
                        data-content="{{_ '%s accounts require to use an application password for %s.' values.appPassword_provider "
                        IMAP" }}">{{_ 'Instructions' }}</a>

                    {{/if}}

                    <label for="imap_auth_pass">
                        {{_ "Application Password" }}
                    </label>

                    {{/unless}}

                    </label>
                    <input type="password" class="form-control {{#if errors.imap_auth_pass}}is-invalid{{/if}}"
                        id="imap_auth_pass" name="imap_auth_pass" value="{{values.imap_auth_pass}}" data-lpignore="true"
                        autocomplete="off" required tabindex="2" />
                    {{#if errors.imap_auth_pass}}
                    <span class="invalid-feedback">{{errors.imap_auth_pass}}</span>
                    {{/if}}
                </div>

                <div class="form-group">
                    <label for="imap_host">{{_ "Hostname" }}</label>
                    <input type="text" class="form-control {{#if errors.imap_host}}is-invalid{{/if}}"
                        data-lpignore="true" autocomplete="off" id="imap_host" name="imap_host"
                        value="{{values.imap_host}}" required tabindex="3" />
                    {{#if errors.imap_host}}
                    <span class="invalid-feedback">{{errors.imap_host}}</span>
                    {{/if}}
                </div>

                <div class="form-group">
                    <label for="imap_port">{{_ "Port" }}</label>
                    <input type="number" class="form-control {{#if errors.imap_port}}is-invalid{{/if}}"
                        data-lpignore="true" autocomplete="off" id="imap_port" name="imap_port"
                        value="{{values.imap_port}}" required tabindex="4" />
                    {{#if errors.imap_port}}
                    <span class="invalid-feedback">{{errors.imap_port}}</span>
                    {{/if}}
                </div>

                <div class="form-group form-check">
                    <input type="checkbox" class="form-check-input {{#if errors.imap_secure}}is-invalid{{/if}}"
                        data-target="header-list" id="imap_secure" name="imap_secure" {{#if
                        values.imap_secure}}checked{{/if}} tabindex="5" />
                    <a class="float-right" href="#" tabindex="-1" role="button" data-toggle="popover"
                        data-trigger="hover" data-title="{{_ 'TLS for IMAP' }}"
                        data-content="{{_ 'TLS (also known as SSL) is usually only needed when using port 993. For other ports EmailEngine falls back to using STARTTLS based encryption.' }}"><i
                            class="fas fa-question-circle"></i></a>
                    <label class="form-check-label" for="imap_secure">{{_ "Use TLS" }}
                    </label>
                    {{#if errors.imap_secure}}
                    <span class="invalid-feedback">{{errors.imap_secure}}</span>
                    {{/if}}
                </div>

            </div>
            <div class="col-sm">
                <h6>{{_ "SMTP" }}</h6>

                <div class="form-group">
                    <label for="smtp_auth_user">{{_ "Username" }}</label>
                    <input type="text" class="form-control {{#if errors.smtp_auth_user}}is-invalid{{/if}}"
                        id="smtp_auth_user" name="smtp_auth_user" value="{{values.smtp_auth_user}}" data-lpignore="true"
                        autocomplete="off" required tabindex="6" />
                    {{#if errors.smtp_auth_user}}
                    <span class="invalid-feedback">{{errors.smtp_auth_user}}</span>
                    {{/if}}
                </div>

                <div class="form-group">

                    {{#unless values.appPassword_required}}

                    <label for="smtp_auth_pass">
                        {{_ "Password" }}
                    </label>

                    {{else}}

                    {{#if values.appPassword_warning}}

                    <a target="_blank" rel="noopener noreferrer" class="float-right" href="#" tabindex="-1"
                        data-toggle="popover" data-trigger="hover" data-title="{{_ 'Important' }}"
                        data-content="{{values.appPassword_warning}}"><i
                            class="fas fa-exclamation-circle text-danger"></i></a>

                    {{else}}

                    <a target="_blank" rel="noopener noreferrer" class="float-right"
                        href="{{values.appPassword_instructions}}" tabindex="-1" data-toggle="popover"
                        data-trigger="hover" data-title="{{_ 'Application Password' }}"
                        data-content="{{_ '%s accounts require to use an application password for %s.' values.appPassword_provider "
                        SMTP" }}">{{_ 'Instructions' }}</a>

                    {{/if}}

                    <label for="smtp_auth_pass">
                        {{_ "Application Password" }}
                    </label>

                    {{/unless}}


                    <input type="password" class="form-control {{#if errors.smtp_auth_pass}}is-invalid{{/if}}"
                        id="smtp_auth_pass" name="smtp_auth_pass" value="{{values.smtp_auth_pass}}" data-lpignore="true"
                        autocomplete="off" required tabindex="7" />
                    {{#if errors.smtp_auth_pass}}
                    <span class="invalid-feedback">{{errors.smtp_auth_pass}}</span>
                    {{/if}}
                </div>

                <div class="form-group">
                    <label for="smtp_host">{{_ "Hostname" }}</label>
                    <input type="text" class="form-control {{#if errors.smtp_host}}is-invalid{{/if}}"
                        data-lpignore="true" autocomplete="off" id="smtp_host" name="smtp_host"
                        value="{{values.smtp_host}}" required tabindex="8" />
                    {{#if errors.smtp_host}}
                    <span class="invalid-feedback">{{errors.smtp_host}}</span>
                    {{/if}}
                </div>

                <div class="form-group">
                    <label for="smtp_port">{{_ "Port" }}</label>
                    <input type="number" class="form-control {{#if errors.smtp_port}}is-invalid{{/if}}"
                        data-lpignore="true" autocomplete="off" id="smtp_port" name="smtp_port"
                        value="{{values.smtp_port}}" required tabindex="9" />
                    {{#if errors.smtp_port}}
                    <span class="invalid-feedback">{{errors.smtp_port}}</span>
                    {{/if}}
                </div>

                <div class="form-group form-check">
                    <input type="checkbox" class="form-check-input {{#if errors.smtp_secure}}is-invalid{{/if}}"
                        data-target="header-list" id="smtp_secure" name="smtp_secure" {{#if
                        values.smtp_secure}}checked{{/if}} tabindex="10" />
                    <a class="float-right" href="#" tabindex="-1" role="button" data-toggle="popover"
                        data-trigger="hover" data-title="{{_ 'TLS for SMTP' }}"
                        data-content="{{_ 'TLS (also known as SSL) is usually only needed when using port 465. For other ports EmailEngine falls back to using STARTTLS based encryption.' }}"><i
                            class="fas fa-question-circle"></i></a>
                    <label class="form-check-label" for="smtp_secure">{{_ "Use TLS" }}
                    </label>
                    {{#if errors.smtp_secure}}
                    <span class="invalid-feedback">{{errors.smtp_secure}}</span>
                    {{/if}}
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-sm">

                <button type="button" id="test-settings-btn" class="btn btn-primary btn-icon-split" tabindex="11">
                    <span class="icon text-white-50">
                        <i class="fas fa-question-circle"></i>
                    </span>
                    <span class="text">{{_ "Test settings" }}</span>
                </button>

                <div class="btn-group">
                    <button type="submit" id="submit-settings-btn" class="btn btn-secondary btn-icon-split"
                        data-disabled="1">
                        <span class="icon text-white-50">
                            <i class="fas fa-arrow-right"></i>
                        </span>
                        <span class="text">{{_ "Continue" }}</span>
                    </button>
                    <button type="button" id="submit-settings-btn-down"
                        class="btn btn-secondary dropdown-toggle dropdown-toggle-split" data-toggle="dropdown"
                        aria-expanded="false">
                        <span class="sr-only">Toggle Dropdown</span>
                    </button>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="#" id="submit-wo-testing">{{_ "Continue without testing" }}</a>
                    </div>
                </div>

            </div>
        </div>
    </div>
</form>

<div class="modal fade" id="testResponseModal" tabindex="-1" aria-labelledby="testResponseModalLabel"
    aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="testResponseModalLabel">{{_ "Test failed" }}</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>{{_ "Failed to validate provided email server settings."}}</p>
                <dl class="row" id="test-errors-list"></dl>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">{{_ "Close" }}</button>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="autoTest" value="{{#if autoTest}}true{{/if}}">

<script>
    document.addEventListener('DOMContentLoaded', () => {

        let formTested = false;
        let formTesting = false;

        let myForm = document.getElementById('settings-form');
        let btnElm = document.getElementById('test-settings-btn');
        let iconElm = document.querySelector('#test-settings-btn i');
        let submitElm = document.getElementById('submit-settings-btn')
        let submitDownElm = document.getElementById('submit-settings-btn-down')
        let errorsListElm = document.getElementById('test-errors-list')

        let urlify = (text) => {
            return text.replace(/(https?:\/\/[^\s]+)/g, function (url) {
                return '<a href="' + url + '" target="_blank" rel="noopener noreferrer">' + url + '</a>';
            })
        }

        let addErrorRow = (type, text, extraLabel, extraText) => {
            let keyElm = document.createElement('dt');
            let valueContainerElm = document.createElement('dd');
            let valueElm = document.createElement('div');


            keyElm.classList.add('col-sm-2');
            valueContainerElm.classList.add('col-sm-10');
            valueElm.classList.add('text-danger')

            keyElm.textContent = type;
            valueElm.textContent = text;

            valueContainerElm.append(valueElm);

            errorsListElm.appendChild(keyElm);
            errorsListElm.appendChild(valueContainerElm);

            if (extraLabel && extraText) {

                extraLabelElm = document.createElement('div');
                extraLabelElm.textContent = extraLabel;

                extraTextElm = document.createElement('small');
                extraTextElm.textContent = extraText;

                extraTextElm.innerHTML = urlify(extraTextElm.innerHTML);

                valueContainerElm.appendChild(extraLabelElm);
                valueContainerElm.appendChild(extraTextElm);
            }
        }

        let showErrorPopup = (data) => {
            data = data || {}

            errorsListElm.innerHTML = '';

            if (data.error && !data.fields) {
                addErrorRow('{{_ "General error" }}', data.error.message || data.error)
            } else if (data.fields) {
                addErrorRow('{{_ "Validation error" }}', data.message);
                for (let field of data.fields) {
                    addErrorRow('-', field.message, 'aaaa', 'bbbbbb');
                }
            } else {
                if (!data.imap || !data.imap.success) {
                    let error = data.imap && data.imap.error || '{{_ "Failed to validate IMAP server settings" }}'
                    if (data.imap && data.imap.responseText) {
                        addErrorRow('IMAP', error, '{{_ "IMAP Server responded with the following message:" }}', data.imap.responseText);
                    } else {
                        addErrorRow('IMAP', error);
                    }
                }

                if (!data.smtp || !data.smtp.success) {
                    let error = data.smtp && data.smtp.error || '{{_ "Failed to validate SMTP server settings" }}'
                    if (data.smtp && data.smtp.responseText) {
                        addErrorRow('SMTP', error, '{{_ "SMTP Server responded with the following message:" }}', data.smtp.responseText);
                    } else {
                        addErrorRow('SMTP', error);
                    }
                }
            }

            $('#testResponseModal').modal('show');
        }

        let toggleSpinner = (enabled, success) => {

            if (enabled) {
                iconElm.classList.remove('fa-spinner', 'fa-spin', 'fa-question-circle', 'fa-check-circle', 'fa-times-circle');
                iconElm.classList.add(success ? 'fa-check-circle' : 'fa-times-circle');
                btnElm.disabled = false;

                submitElm.dataset.disabled = !success ? "1" : "0";
                if (submitElm.dataset.disabled === "1") {
                    submitElm.classList.replace('btn-primary', 'btn-secondary');
                    submitDownElm.classList.replace('btn-primary', 'btn-secondary');
                } else {
                    submitElm.classList.replace('btn-secondary', 'btn-primary');
                    submitDownElm.classList.replace('btn-secondary', 'btn-primary');
                }
            } else {
                iconElm.classList.remove('fa-check-circle', 'fa-times-circle', 'fa-question-circle');
                iconElm.classList.add('fa-spinner', 'fa-spin');
                btnElm.disabled = true;

                submitElm.dataset.disabled = "1";
                submitElm.classList.replace('btn-primary', 'btn-secondary');
                submitDownElm.classList.replace('btn-primary', 'btn-secondary');
            }
        }

        let testSettings = async () => {
            let formData = new FormData(myForm);
            let body = {}
            for (var pair of formData.entries()) {
                body[pair[0]] = pair[1];
            }

            const res = await fetch('/accounts/new/imap/test', {
                method: 'post',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify(body)
            });

            if (!res.ok) {
                try {
                    let errData = await res.json();
                    return errData
                } catch (err) {
                    // ignore
                    console.error(err)
                }

                throw new Error(`{{_ "HTTP error!"}} status: ${res.status}`);
            }

            const data = await res.json();

            return data;
        }

        let runTest = (continueIfSuccessful) => {
            if (formTesting) {
                return;
            }
            formTesting = true;

            toggleSpinner(false);
            testSettings().then(data => {
                formTesting = false;

                if (data.imap && data.imap.success && data.smtp && data.smtp.success) {
                    toggleSpinner(true, true);
                    // everything checks out!
                    formTested = true;

                    if (continueIfSuccessful) {
                        // resubmit after paint
                        setTimeout(() => myForm.submit(), 10);
                    }

                } else {
                    toggleSpinner(true, false);
                    formTested = false;
                    showErrorPopup(data);
                }
            }).catch(err => {
                formTesting = false;
                toggleSpinner(true, false);
                formTested = false;
                showErrorPopup({ error: err });
            });
        }

        document.getElementById('submit-wo-testing').addEventListener('click', e => {
            e.preventDefault();
            formTested = true;
            myForm.submit();
        });

        btnElm.addEventListener('click', () => {
            runTest();
        });

        myForm.addEventListener('submit', e => {
            submitElm.blur();
            if (formTested) {
                return;
            }
            e.preventDefault();
            runTest(true);
        });

        const checkPort = (proto) => {
            let portNr = Number(document.getElementById(`${proto}_port`).value);
            switch (proto) {
                case 'imap':
                    if (portNr === 993) {
                        // enable TLS checkbox
                        document.getElementById(`${proto}_secure`).checked = true;
                    }
                    if (portNr === 110) {
                        // enable TLS checkbox
                        document.getElementById(`${proto}_secure`).checked = false;
                    }
                    break;
                case 'smtp':
                    if (portNr === 465) {
                        // enable TLS checkbox
                        document.getElementById(`${proto}_secure`).checked = true;
                    }
                    if (portNr === 25 || portNr === 587) {
                        // enable TLS checkbox
                        document.getElementById(`${proto}_secure`).checked = false;
                    }
                    break;
            }
        }

        let imapPortElm = document.getElementById('imap_port');
        let smtpPortElm = document.getElementById('smtp_port');

        try {
            if (typeof Intl !== 'undefined' && Intl && typeof Intl.DateTimeFormat === 'function') {
                tz = Intl.DateTimeFormat().resolvedOptions().timeZone;
                if (tz) {
                    document.getElementById('tz').value = tz;
                }
            }
        } catch (err) {
            // Intl probably not supported
        }

        imapPortElm.addEventListener('change', () => checkPort('imap'));
        imapPortElm.addEventListener('click', () => checkPort('imap'));
        imapPortElm.addEventListener('keyup', () => checkPort('imap'));
        smtpPortElm.addEventListener('change', () => checkPort('smtp'));
        smtpPortElm.addEventListener('click', () => checkPort('smtp'));
        smtpPortElm.addEventListener('keyup', () => checkPort('smtp'));

        if (document.getElementById('autoTest').value.trim() === 'true') {
            runTest();
        }

    })
</script>