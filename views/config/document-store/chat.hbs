{{> document_store_header}}

<form method="post" action="/admin/config/document-store/chat">
    <input type="hidden" name="crumb" id="crumb" value="{{crumb}}" />

    <div class="card mt-4">

        <ul class="list-group list-group-flush mb-3">

            <li class="list-group-item d-flex justify-content-between align-items-top">

                <div class="form-group form-check mb-0">
                    <input type="checkbox"
                        class="form-check-input {{#if errors.documentStoreGenerateEmbeddings}}is-invalid{{/if}}"
                        id="documentStoreGenerateEmbeddings" name="documentStoreGenerateEmbeddings" {{#if
                        values.documentStoreGenerateEmbeddings}}checked{{/if}} />
                    <label class="form-check-label" for="documentStoreGenerateEmbeddings">Enable the "Chat with emails"
                        feature

                        <a href="#" tabindex="-1" role="button" data-toggle="popover" data-trigger="hover"
                            style="display: inline-block;" data-content="Requires ElasticSearch 8.8.0+"><i
                                class="fas fa-info-circle text-info"></i></a>

                        {{#unless documentStoreEnabled}}
                        <a href="#" tabindex="-1" role="button" data-toggle="popover" data-trigger="hover"
                            style="display: inline-block;" data-title="Document store is not enabled"
                            data-content="Document Store syncing must be enabled to use the &quot;Chat with emails&quot; feature"><i
                                class="fas fa-exclamation-triangle text-danger"></i></a>
                        {{/unless}}

                    </label>
                    {{#if errors.documentStoreGenerateEmbeddings}}
                    <span class="invalid-feedback">{{errors.documentStoreGenerateEmbeddings}}</span>
                    {{/if}}
                    <small class="form-text text-muted">If enabled, then EmailEngine uses the OpenAI API to produce text
                        embeddings for emails in the document store. For this feature to work, ensure document store
                        syncing is active and that the OpenAI API key is configured. You can run chat requests with the
                        <a href="/admin/swagger#/Chat/postV1ChatAccount" target="_blank" rel="noopener noreferrer">Chat
                            API method</a>.</small>
                    <div class="mt-2"><small><strong>Important:</strong> EmailEngine will only create embeddings for
                            emails processed when the feature is active. To generate embeddings for previously stored
                            emails, utilize the <a href="/admin/swagger#/Account/putV1AccountAccountFlush"
                                target="_blank" rel="noopener noreferrer">Flush API method</a>. This will force
                            EmailEngine to re-process all
                            emails in the Document Store.</small>
                    </div>



                </div>

                <div class="text-right" style="display: flex; flex-direction: column; justify-content: space-between;">

                    <div>
                        <div class="text-muted code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                                target="_blank" rel="noopener noreferrer">documentStoreGenerateEmbeddings</a>]</div>

                        <div class="text-muted code-link">[<a href="/admin/swagger#/Chat/postV1ChatAccount"
                                target="_blank" rel="noopener noreferrer">Chat&nbsp;with&nbsp;emails</a>]</div>

                        <div class="text-muted code-link">[<a href="/admin/swagger#/Account/putV1AccountAccountFlush"
                                target="_blank" rel="noopener noreferrer">Request&nbsp;account&nbsp;flush</a>]</div>

                        <div>
                            {{#if
                            values.documentStoreGenerateEmbeddings}}
                            <span class="badge badge-success badge-pill">enabled</span>
                            {{else}}
                            <span class="badge badge-warning badge-pill">disabled</span>
                            {{/if}}
                        </div>
                    </div>

                    <div style="align-self: flex-end;">

                        <button type="button" class="btn btn-light" data-toggle="modal" data-target="#tryChatModal"
                            id="try-chat-btn">
                            <i class="fas fa-comment-alt fa-fw"></i> Try it
                        </button>

                    </div>


                </div>
            </li>
        </ul>

        <div class="card-body">

            {{#if indexInfo.error}}
            <div class="alert alert-danger">
                <strong>Index handling failed:</strong> <br>
                <pre>{{indexInfo.error}}</pre>
            </div>
            {{/if}}

            <div class="form-group">

                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">openAiAPIKey</a>]
                </div>

                <label for="openAiAPIKey">OpenAI API key</label>
                <input type="password" class="form-control {{#if errors.openAiAPIKey}}is-invalid{{/if}}"
                    id="openAiAPIKey" name="openAiAPIKey" value="{{values.openAiAPIKey}}" data-lpignore="true"
                    autocomplete="off" {{#if hasOpenAiAPIKey}} placeholder="API key is set but not shown&mldr;"
                    {{/if}} />
                {{#if errors.openAiAPIKey}}
                <span class="invalid-feedback">{{errors.openAiAPIKey}}</span>
                {{/if}}
                <small class="form-text text-muted">OpenAI API key. This is the same key that is set on the <a
                        href="/admin/config/ai">LLM Integration</a> page.</small>
            </div>

            <div class="form-group">
                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">documentStoreChatModel</a>]</div>

                <label for="settingsServicedocumentStoreChatModel">OpenAI Model</label>
                <select id="settingsServicedocumentStoreChatModel" class="custom-select custom-select-sm"
                    name="documentStoreChatModel" {{#if errors.documentStoreChatModel}}is-invalid{{/if}}>
                    {{#each openAiModels}}
                    <option value="{{id}}" {{#if selected}}selected{{/if}}>{{name}}</option>
                    {{/each}}
                </select>
                {{#if errors.documentStoreChatModel}}
                <span class="invalid-feedback">{{errors.documentStoreChatModel}}</span>
                {{/if}}
                <small class="form-text text-muted">Select the model to use to ask questions. Ensure your account can
                    use the selected model, or chat requests will fail.</small>
            </div>

        </div>
    </div>


    <div class="mb-4 mt-4">
        <button type="submit" class="btn btn-primary btn-icon-split">
            <span class="icon text-white-50">
                <i class="fas fa-cog"></i>
            </span>
            <span class="text">Update settings</span>
        </button>
    </div>

</form>

<div class="modal fade" id="tryChatModal" tabindex="-1" aria-labelledby="tryChatModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="tryChatModalLabel">Send a chat message</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="chatPayloadForm" method="post" action=".">
                <div class="modal-body">
                    <div class="form-group">
                        <div class="text-muted float-right code-link">[API Reference: <a
                                href="/admin/swagger#/Chat/postV1ChatAccount" target="_blank"
                                rel="noopener noreferrer">/v1/chat/{account}</a>]
                        </div>
                        <label for="inputAccount">Account ID</label>
                        <input type="text" class="form-control" name="account" id="inputAccount"
                            aria-describedby="inputAccountHelp" value="" required>
                        <small id="inputNameHelp" class="form-text text-muted">The account ID to send the chat message
                            as.</small>
                    </div>

                    <div class="form-group">
                        <label for="question">Question</label>
                        <input type="text" class="form-control" name="question" id="question"
                            aria-describedby="questionHelp" value="" required>
                        <small id="questionHelp" class="form-text text-muted">Question to ask about the emails on the
                            account.</small>
                    </div>

                    <div id="chat-error" class="d-none">
                        <div class="alert alert-danger">
                            <strong>Request failed</strong>: <span id="chat-error-text"></span>
                        </div>
                    </div>

                    <div id="chat-response" class="d-none">
                        <div class="card">
                            <div class="card-body">
                                <div>
                                    <div id="chat-response-answer"></div>
                                </div>
                            </div>
                            <ul class="d-none mt-2 list-group list-group-flush" id="chat-response-messages">
                            </ul>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" id="send-question-btn" class="btn btn-primary btn-icon-split">
                        <span class="icon text-white-50">
                            <i class="fas fa-comment-alt"></i>
                        </span>
                        <span class="text">Ask</span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        $('.has-tooltip').tooltip();

        const sendQuestionPayload = async () => {
            const payload = {
                crumb: document.getElementById('crumb').value,
                account: document.getElementById('inputAccount').value,
                question: document.getElementById('question').value
            }

            const res = await fetch('/admin/config/document-store/chat/test', {
                method: 'post',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!res.ok) {
                let data;
                try {
                    data = await res.json()
                } catch (err) {
                    // ignore
                }

                console.log(data)
                console.log(res)

                throw new Error(`HTTP request failed with the ${res.status} status code.`);
            }

            const data = await res.json();

            if (data.error) {
                throw new Error(data.error);
            }

            return data;
        }

        let sendQuestionBtn = document.getElementById('send-question-btn')

        let iconElm = document.querySelector('#send-question-btn i');
        let toggleSpinner = (enabled) => {

            if (enabled) {
                iconElm.classList.remove('fa-spinner', 'fa-spin');
                iconElm.classList.add('fa-comment-alt');
                sendQuestionBtn.disabled = false;
            } else {
                iconElm.classList.remove('fa-comment-alt');
                iconElm.classList.add('fa-spinner', 'fa-spin');
                sendQuestionBtn.disabled = true;
            }
        }


        let chatErrorElm = document.getElementById('chat-error')
        let chatErrorTextElm = document.getElementById('chat-error-text')


        let chatResponseElm = document.getElementById('chat-response');
        let chatResponseAnswerElm = document.getElementById('chat-response-answer');
        let chatResponseMessagesElm = document.getElementById('chat-response-messages');


        function showError(message) {
            chatErrorElm.classList.remove('d-none');
            chatResponseElm.classList.add('d-none');

            chatErrorTextElm.textContent = message
        }

        function showChatResponse(message) {
            chatErrorElm.classList.add('d-none');
            chatResponseElm.classList.remove('d-none');

            chatResponseAnswerElm.innerHTML = ''
            if (message.answer) {
                chatResponseAnswerElm.textContent = message.answer;
            } else {
                let mutedElm = document.createElement('small');
                mutedElm.classList.add('text-muted')
                mutedElm.textContent = 'EmailEngine was not able to find an answer to this question.'
                chatResponseAnswerElm.appendChild(mutedElm)
            }
            chatResponseMessagesElm.innerHTML = ''

            if (message.messages && message.messages.length) {
                chatResponseMessagesElm.classList.remove('d-none');
            } else {
                chatResponseMessagesElm.classList.add('d-none');
            }

            for (let messageData of message.messages || []) {
                let liElm = document.createElement('li');
                liElm.classList.add('list-group-item')
                let smallElm = document.createElement('small');
                smallElm.textContent = `\u2022 ${messageData.subject}`;
                chatResponseMessagesElm.appendChild(liElm);
                liElm.appendChild(smallElm)
            }

        }

        function clearMessages() {
            chatErrorElm.classList.add('d-none');
            chatResponseElm.classList.add('d-none');
        }

        let sending = false;
        function sendTestQuestion() {
            if (sending) {
                return;
            }

            clearMessages();

            sending = true;
            toggleSpinner(false);
            sendQuestionPayload().then(info => {
                toggleSpinner(true);
                sending = false;
                if (info.error) {
                    return showError(info.error);
                }

                showChatResponse(info);

            }).catch(err => {
                toggleSpinner(true);
                sending = false;
                showError(err.message);
            });
        }

        $('#tryChatModal').on('show.bs.modal', function (event) {
            if (sending) {
                return;
            }
            clearMessages();
            document.getElementById('inputAccount').value = '';
            document.getElementById('question').value = '';
        });

        document.getElementById('chatPayloadForm').addEventListener('submit', e => {
            e.preventDefault();
            sendTestQuestion();
        });
    })
</script>