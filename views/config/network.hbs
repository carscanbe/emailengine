<div class="d-sm-flex align-items-center justify-content-between mb-1">
    <h1 class="h3 mb-0 text-gray-800">

        <small><i class="fas fa-network-wired fa-fw"></i></small>
        Network
    </h1>
</div>

<p class="mb-4">Manage connection routing for EmailEngine.</p>

<form method="post" action="/admin/config/network">
    <input type="hidden" name="crumb" id="crumb" value="{{crumb}}" />

    <div class="card mb-4 mt-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Proxy Configuration</h6>
        </div>
        <div class="card-body">
            <p>Configure a default proxy for EmailEngine to use with all email server connections. Supported proxy types
                include HTTP CONNECT and SOCKS (versions 4 and 5).</p>

            <div class="form-group form-check">

                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">proxyEnabled</a>]</div>

                <input type="checkbox"
                    class="form-check-input proxy-status {{#if errors.proxyEnabled}}is-invalid{{/if}}"
                    id="proxy_enabled" name="proxyEnabled" {{#if values.proxyEnabled}}checked{{/if}} />
                <label class="form-check-label" for="proxy_enabled">Enable Proxy for All Accounts</label>
                {{#if errors.proxyEnabled}}
                <span class="invalid-feedback">{{errors.proxyEnabled}}</span>
                {{/if}}
                <small class="form-text text-muted">Enable this option to apply the proxy settings to all accounts.
                    Individual accounts can still be configured with specific proxy settings if needed.</small>

            </div>

            <div class="form-group">

                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">proxyUrl</a>]</div>

                <label for="proxyUrl">Proxy URL</label>
                <input type="text" class="form-control or-else-all  {{#if errors.proxyUrl}}is-invalid{{/if}}"
                    id="proxyUrl"
                    placeholder="Enter the proxy connection URL (e.g., &quot;socks://localhost:1080&quot;)"
                    value="{{values.proxyUrl}}" name="proxyUrl" data-target="proxy-status">
                {{#if errors.proxyUrl}}
                <span class="invalid-feedback">{{errors.proxyUrl}}</span>
                {{/if}}
                <small id="proxyUrlBlock" class="form-text text-muted">Enter the proxy connection URL (e.g.,
                    "socks://localhost:1080"). The URL must start with <code>http://</code>, <code>https://</code>,
                    <code>socks://</code>, <code>socks4://</code>, or <code>socks5://</code>.</small>
            </div>

            <div class="form-group">

                <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                        target="_blank" rel="noopener noreferrer">smtpEhloName</a>]</div>

                <label for="smtpEhloName">SMTP Greeting Hostname</label>
                <input type="text" class="form-control {{#if errors.smtpEhloName}}is-invalid{{/if}}" id="smtpEhloName"
                    placeholder="Specify the hostname for the SMTP EHLO/HELO greeting (e.g., &quot;my.proxy.tld&quot;)"
                    value="{{values.smtpEhloName}}" name="smtpEhloName">
                {{#if errors.smtpEhloName}}
                <span class="invalid-feedback">{{errors.smtpEhloName}}</span>
                {{/if}}
                <small id="smtpEhloNameBlock" class="form-text text-muted">Specify the hostname to be used in the SMTP
                    EHLO/HELO greeting (e.g., "my.proxy.tld"). If left blank, <code>{{defaultSmtpEhloName}}</code> is
                    used by default. For dedicated IP addresses, using the associated hostname of the IP is
                    recommended.</small>
            </div>
        </div>
    </div>

    <div class="card mb-4 mt-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">IP Address Selection Strategy</h6>
        </div>
        <div class="card-body">
            <p>If your server has access to multiple IP addresses, you can define how EmailEngine selects an IP for
                email server connections:</p>
            <ul>
                <li><strong>Dedicated</strong>: Assigns the same IP address from the pool to a specific account
                    consistently.</li>
                <li><strong>Random</strong>: Allocates a different, random IP address from the pool for each connection.
                </li>
                <li><strong>Server Default</strong>: EmailEngine will not specify a local IP address and will use the
                    server's default network settings.</li>
            </ul>
        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>Protocol</th>
                    <th>Strategy</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <span>IMAP</span>
                    </td>
                    <td>
                        <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                                target="_blank" rel="noopener noreferrer">imapStrategy</a>]
                        </div>
                        <select class="custom-select custom-select-sm" name="imapStrategy" {{#if
                            errors.imapStrategy}}is-invalid{{/if}}>

                            {{#each imapStrategies}}
                            <option value="{{key}}" {{#if selected}}selected{{/if}}>{{title}}</option>
                            {{/each}}
                        </select>
                        {{#if errors.imapStrategy}}
                        <span class="invalid-feedback">{{errors.imapStrategy}}</span>
                        {{/if}}
                    </td>
                </tr>

                <tr>
                    <td>
                        <span>SMTP</span>
                    </td>
                    <td>
                        <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                                target="_blank" rel="noopener noreferrer">smtpStrategy</a>]
                        </div>
                        <select class="custom-select custom-select-sm" name="smtpStrategy" {{#if
                            errors.smtpStrategy}}is-invalid{{/if}}>

                            {{#each smtpStrategies}}
                            <option value="{{key}}" {{#if selected}}selected{{/if}}>{{title}}</option>
                            {{/each}}

                        </select>
                        {{#if errors.smtpStrategy}}
                        <span class="invalid-feedback">{{errors.smtpStrategy}}</span>
                        {{/if}}
                    </td>
                </tr>

            </tbody>
        </table>
    </div>

    <div class="card mb-4 mt-4">
        <div class="card-header py-3 d-flex justify-content-between">
            <h6 class="m-0 font-weight-bold text-primary align-self-center">Configurable IP Addresses</h6>
            <div class="align-self-center"><button class="btn btn-primary" id="reload-btn">
                    <i class="fa fa-sync-alt fa-fw"></i>
                    Scan addresses</button></div>
        </div>

        <div class="card-body">
            <div class="text-muted float-right code-link">[<a href="/admin/swagger#/Settings/postV1Settings"
                    target="_blank" rel="noopener noreferrer">localAddresses</a>]</div>
            Specify the IP addresses that EmailEngine can use under the <em>Dedicated</em> or <em>Random</em>
            selection strategies. If the selected IPs are unavailable, EmailEngine will default to the server's standard
            network settings.
        </div>
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="checkbox-all">&nbsp;
                        </div>
                    </th>
                    <th>
                        Local address
                    </th>
                    <th>
                        Public address
                    </th>
                    <th colspan="2">
                        Name
                    </th>
                </tr>
            </thead>
            <tbody id="address-list">
                {{>address_list}}
            </tbody>

        </table>

    </div>

    <div class="mb-4">
        <button type="submit" class="btn btn-primary btn-icon-split">
            <span class="icon text-white-50">
                <i class="fas fa-cog"></i>
            </span>
            <span class="text">Update Settings</span>
        </button>
    </div>

</form>


<div class="modal fade" id="deleteAddress" tabindex="-1" aria-labelledby="deleteAddressLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">

            <div class="modal-header">
                <h5 class="modal-title" id="deleteAddressLabel">Delete address</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this local address? When you later rescan addresses and the address is
                found it gets re-added to the list.
            </div>
            <div class="modal-footer">
                <form method="post" action="/admin/config/network/delete">
                    <input type="hidden" name="crumb" value="{{crumb}}">
                    <input type="hidden" name="localAddress" value="">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>

        </div>
    </div>
</div>


<script id="address-list-template" type="text/x-handlebars-template">
{{{addressListTemplate}}}
</script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let reloadBtn = document.getElementById('reload-btn');
        let reloadBtnIcon = document.querySelector('#reload-btn i');

        const requestReload = async () => {
            const res = await fetch('/admin/config/network/reload', {
                method: 'post',
                headers: { 'content-type': 'application/json' },
                body: JSON.stringify({
                    crumb: document.getElementById('crumb').value
                })
            });
            if (!res.ok) {
                throw new Error(`HTTP error! status: ${res.status}`);
            }
            const data = await res.json();

            return data;
        }

        let updateAllCheckboxes = () => {
            let state = document.getElementById('checkbox-all').checked;

            for (let elm of document.querySelectorAll('.checkbox-entry')) {
                elm.checked = state
            }
        }

        let checkCheckboxes = elm => {
            let allChecked = true;
            for (let elm of document.querySelectorAll('#address-list .checkbox-entry')) {
                if (!elm.checked) {
                    allChecked = false
                }
            }
            document.getElementById('checkbox-all').checked = allChecked;
        }

        document.getElementById('checkbox-all').addEventListener('click', updateAllCheckboxes);
        document.getElementById('checkbox-all').addEventListener('change', updateAllCheckboxes);

        for (let elm of document.querySelectorAll('#address-list .checkbox-entry')) {
            elm.addEventListener('click', checkCheckboxes);
            elm.addEventListener('change', checkCheckboxes);
        }

        checkCheckboxes()

        const addressListTemplate = Handlebars.compile(document.getElementById('address-list-template').innerHTML);

        let redrawAddressList = data => {
            let html = addressListTemplate(data);
            document.getElementById('address-list').innerHTML = html;

            for (let elm of document.querySelectorAll('#address-list .checkbox-entry')) {
                elm.addEventListener('click', checkCheckboxes);
                elm.addEventListener('change', checkCheckboxes);
            }

            checkCheckboxes();
        }

        let loading = false;
        let reloadAddresses = () => {
            if (loading) {
                return
            }
            loading = true
            reloadBtnIcon.classList.add('fa-spin');
            reloadBtn.disabled = true;

            requestReload().then(data => {
                loading = false
                reloadBtnIcon.classList.remove('fa-spin');
                reloadBtn.disabled = false;
                if (data.error) {
                    showToast('Failed to send payload', 'alert-triangle')
                    return;
                }

                if (data.addresses) {
                    redrawAddressList(data);
                }

            }).catch(err => {
                loading = false
                reloadBtnIcon.classList.remove('fa-spin');
                reloadBtn.disabled = false;
                showToast('Request failed\n' + err.message, 'alert-triangle');
            });
        }

        reloadBtn.addEventListener('click', reloadAddresses);

        if (!document.querySelectorAll('#address-list .checkbox-entry').length) {
            reloadAddresses();
        }

        $('#deleteAddress').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget) // Button that triggered the modal
            var address = button.data('address') // Extract info from data-* attributes
            // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
            // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
            var modal = $(this)
            modal.find('.modal-title').text(`Delete ${address}?`)
            modal.find('.modal-footer input[name=localAddress]').val(address)
        })
    });
</script>